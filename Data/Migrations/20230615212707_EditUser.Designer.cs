// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDevelopment2.Data;

#nullable disable

namespace SoftwareDevelopment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615212707_EditUser")]
    partial class EditUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7525f946-1550-4efc-8dba-f1652ed4f3c7",
                            Email = "Carolyn.Wiegand@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "48668d6c3a6ea12b154ae38e3bed73f56b90cb8e",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3861cfde-2331-45f9-81fb-20686d00de63",
                            TwoFactorEnabled = false,
                            UserName = "Carolyn.Wiegand@yahoo.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "439f3a9f-9a3c-4d34-a637-bdf8b78fa6b5",
                            Email = "Dianne.Price@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "1d925e9dec5d9eb98db04f4b071cc9e892c7eebd",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "441abc5b-e2f5-40f3-abf4-fd9c95d2f2c3",
                            TwoFactorEnabled = false,
                            UserName = "Dianne.Price@yahoo.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31301802-4de8-4569-87fb-50324efe4f69",
                            Email = "Martha38@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "f24c01483ec0c9658f22f12b02e49a93b967c9fc",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "830f012e-e846-4543-88fd-14738a110444",
                            TwoFactorEnabled = false,
                            UserName = "Martha38@hotmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8d7bc29-591f-4e1f-aebd-0d8762e84406",
                            Email = "Marsha57@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "f67768af66ae95ed22b9a79f54e4e811b6f502fe",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f5d118a-d400-4f61-a0aa-bf96ef42c744",
                            TwoFactorEnabled = false,
                            UserName = "Marsha57@hotmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1f4efe5-a2eb-4faf-93da-5f88c513b746",
                            Email = "Ethel.Ruecker@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "c90c44d4dcfa30e4fb26a803771bedeca9db29ed",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afee418f-c692-4667-bae6-2eac4c2353eb",
                            TwoFactorEnabled = false,
                            UserName = "Ethel.Ruecker@yahoo.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a670a5b0-688d-429b-9da2-5fd4716415e4",
                            Email = "Mamie.Ferry@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "cfd8e62dc27f388965ec4f90afafe5caf6e57f24",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de4fa6d4-1d44-4f8a-af82-0fb728ce6a1b",
                            TwoFactorEnabled = false,
                            UserName = "Mamie.Ferry@hotmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a06a592f-3cbd-4b61-8a72-03333ebdba6e",
                            Email = "Kelley60@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "1bdd4af5e585cd2cd3216537b0d7ef79ac92134b",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14fba08b-694e-405b-98c3-8e5add037ac6",
                            TwoFactorEnabled = false,
                            UserName = "Kelley60@hotmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "817a9a5a-836f-4701-94eb-11aa5b9d317e",
                            Email = "Eileen.Boyle4@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "cc405d355d1a265196c82bf6294e0d97c8b41748",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "450462a5-5c85-4fbb-9a81-2329e5c952e5",
                            TwoFactorEnabled = false,
                            UserName = "Eileen.Boyle4@yahoo.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd4f4c6e-e4f7-4149-b2aa-36aa899056f3",
                            Email = "Lauren7@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "9458192ae1a68096edf834c797077eaccc8a6bff",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb50b58f-5199-46bd-a4e6-1c681969aa0b",
                            TwoFactorEnabled = false,
                            UserName = "Lauren7@yahoo.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94293b68-6c27-4217-9698-a14af2b66214",
                            Email = "Ira.Dare97@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "882fe6a0c35ffc88cdc7eb0f3321211db4718d71",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4624fc8-0896-44d2-b6d5-876a87d17f22",
                            TwoFactorEnabled = false,
                            UserName = "Ira.Dare97@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 1",
                            Title = "Harry Potter: 1",
                            YearOfRelease = 1998
                        },
                        new
                        {
                            Id = 2,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 2",
                            Title = "Harry Potter: 2",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = 3,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 3",
                            Title = "Harry Potter: 3",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = 4,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 4",
                            Title = "Harry Potter: 4",
                            YearOfRelease = 2001
                        },
                        new
                        {
                            Id = 5,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 5",
                            Title = "Harry Potter: 5",
                            YearOfRelease = 2002
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 6",
                            Title = "Harry Potter: 6",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 7",
                            Title = "Harry Potter: 7",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 8",
                            Title = "Harry Potter: 8",
                            YearOfRelease = 2005
                        },
                        new
                        {
                            Id = 9,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 9",
                            Title = "Harry Potter: 9",
                            YearOfRelease = 2006
                        },
                        new
                        {
                            Id = 10,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 10",
                            Title = "Harry Potter: 10",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = 11,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 11",
                            Title = "Harry Potter: 11",
                            YearOfRelease = 2008
                        },
                        new
                        {
                            Id = 12,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 12",
                            Title = "Harry Potter: 12",
                            YearOfRelease = 2009
                        },
                        new
                        {
                            Id = 13,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 13",
                            Title = "Harry Potter: 13",
                            YearOfRelease = 2010
                        },
                        new
                        {
                            Id = 14,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 14",
                            Title = "Harry Potter: 14",
                            YearOfRelease = 2011
                        },
                        new
                        {
                            Id = 15,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 15",
                            Title = "Harry Potter: 15",
                            YearOfRelease = 2012
                        },
                        new
                        {
                            Id = 16,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 16",
                            Title = "Harry Potter: 16",
                            YearOfRelease = 2013
                        },
                        new
                        {
                            Id = 17,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 17",
                            Title = "Harry Potter: 17",
                            YearOfRelease = 2014
                        },
                        new
                        {
                            Id = 18,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 18",
                            Title = "Harry Potter: 18",
                            YearOfRelease = 2015
                        },
                        new
                        {
                            Id = 19,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 19",
                            Title = "Harry Potter: 19",
                            YearOfRelease = 2016
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5419),
                            ItemId = 1,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5357),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5456),
                            ItemId = 2,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5455),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5474),
                            ItemId = 3,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5473),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5491),
                            ItemId = 4,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5490),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5512),
                            ItemId = 5,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5511),
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5531),
                            ItemId = 6,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5530),
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5548),
                            ItemId = 7,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5547),
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5567),
                            ItemId = 8,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5566),
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5628),
                            ItemId = 9,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5627),
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5649),
                            ItemId = 10,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5648),
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5667),
                            ItemId = 11,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5666),
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5685),
                            ItemId = 12,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5684),
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5703),
                            ItemId = 13,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5701),
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5720),
                            ItemId = 14,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5719),
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5736),
                            ItemId = 15,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5735),
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5779),
                            ItemId = 16,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5778),
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5801),
                            ItemId = 17,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5799),
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5819),
                            ItemId = 18,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5818),
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            EndDate = new DateTime(2023, 7, 6, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5836),
                            ItemId = 19,
                            StartDate = new DateTime(2023, 6, 15, 23, 27, 7, 95, DateTimeKind.Local).AddTicks(5835),
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 10,
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ItemId = 11,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ItemId = 12,
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ItemId = 13,
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ItemId = 14,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ItemId = 15,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ItemId = 16,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ItemId = 17,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ItemId = 18,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ItemId = 19,
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("ExtendsInARow")
                        .HasColumnType("int");

                    b.Property<float>("FinePerItemPerDay")
                        .HasColumnType("real");

                    b.Property<int>("ItemsAtSameTime")
                        .HasColumnType("int");

                    b.Property<int>("ItemsPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ReservationCost")
                        .HasColumnType("real");

                    b.Property<float>("SubscriptionCostPerMonth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
