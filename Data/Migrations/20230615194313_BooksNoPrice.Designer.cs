// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDevelopment2.Data;

#nullable disable

namespace SoftwareDevelopment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615194313_BooksNoPrice")]
    partial class BooksNoPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8c898b0-4be1-4ee3-b35c-510449f7e91e",
                            Email = "Pete_Lindgren46@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "916cd8d4315173bde42534dc6e1a3aa5da0cfea5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7798a13f-926b-4612-a4ee-da2582f6cbe1",
                            TwoFactorEnabled = false,
                            UserName = "Pete_Lindgren46@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4463818-a98c-4be2-aafb-91a7021cfc5b",
                            Email = "Dwight_Nienow@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "c2514dc5fbf3c9d70736263ef8ddd0c9a870b13b",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89f46f34-8b40-4f4e-a1c6-324fe3269102",
                            TwoFactorEnabled = false,
                            UserName = "Dwight_Nienow@hotmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "498309b9-6e08-4598-8eb1-f98d2cc99b3d",
                            Email = "Tabitha_Herzog@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "dbe9cbb2d1116d5ca58fb0718aef3288de5c8e01",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "098e2a13-d810-4b5e-be61-ad1c5cd9cca3",
                            TwoFactorEnabled = false,
                            UserName = "Tabitha_Herzog@yahoo.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2f77dd4-895b-4ed0-ac1a-9c5b6b8ec4ec",
                            Email = "Domingo.DAmore27@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "94db2943c54204a9193adcba1c7a4c1e62f8d58e",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a48f6f5-6155-4669-8cb3-d3b8bd9b4872",
                            TwoFactorEnabled = false,
                            UserName = "Domingo.DAmore27@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91daf7a0-c8dc-465b-ad66-d9e22d5f722d",
                            Email = "Lula.Weimann72@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "7b1cb069ca04bd7ec7b922caea978bce8f06474c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd503a49-d0fa-4074-9014-d3af3107ac2e",
                            TwoFactorEnabled = false,
                            UserName = "Lula.Weimann72@gmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6397e9f-1e6b-4c3c-91c1-bfacb2809d5d",
                            Email = "Lucas.Ondricka93@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "6834e259b2f54938abd451a53f1ff5381af24fb4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34e2fd7f-678b-42d0-8240-148de8d3a5b6",
                            TwoFactorEnabled = false,
                            UserName = "Lucas.Ondricka93@hotmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd52648a-2f1a-4336-9691-bf0517ff24de",
                            Email = "Victor42@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "6477d969cdd7ccd33c9d8e818fb97f21058f91f4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9ba9a36-ef2c-4fcb-abb5-d8f4bd8da036",
                            TwoFactorEnabled = false,
                            UserName = "Victor42@yahoo.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d8f6d02-34bd-4216-b1b7-ef736bd3a2ad",
                            Email = "Otis.Davis@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "754d106fad03a0e9a9499dd4ba56196e94d45102",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7991bf2-8e3b-4f70-9f01-643fa1e23025",
                            TwoFactorEnabled = false,
                            UserName = "Otis.Davis@yahoo.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3cbedc3-6dc7-4bd8-89f3-17049f10a02a",
                            Email = "Elena_Kulas56@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "85f6e269b4f4dd2d73e77bc1de303cc0da449043",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2be223ce-80d8-494b-a11c-ffbc5321f0fd",
                            TwoFactorEnabled = false,
                            UserName = "Elena_Kulas56@yahoo.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4352585c-1c78-4653-a8f7-d31349fb09da",
                            Email = "Estelle_Wolf89@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "21322fd1c87a632cbc1383b22410fae78f61fca9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa9c98e6-1649-445f-997c-d38ea8a9a368",
                            TwoFactorEnabled = false,
                            UserName = "Estelle_Wolf89@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 1",
                            Title = "Harry Potter: 1",
                            YearOfRelease = 1998
                        },
                        new
                        {
                            Id = 2,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 2",
                            Title = "Harry Potter: 2",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = 3,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 3",
                            Title = "Harry Potter: 3",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = 4,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 4",
                            Title = "Harry Potter: 4",
                            YearOfRelease = 2001
                        },
                        new
                        {
                            Id = 5,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 5",
                            Title = "Harry Potter: 5",
                            YearOfRelease = 2002
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 6",
                            Title = "Harry Potter: 6",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 7",
                            Title = "Harry Potter: 7",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 8",
                            Title = "Harry Potter: 8",
                            YearOfRelease = 2005
                        },
                        new
                        {
                            Id = 9,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 9",
                            Title = "Harry Potter: 9",
                            YearOfRelease = 2006
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(8932),
                            ItemId = 1,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(8855),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(8975),
                            ItemId = 2,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(8972),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9007),
                            ItemId = 3,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9004),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9039),
                            ItemId = 4,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9036),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9077),
                            ItemId = 5,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9074),
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9112),
                            ItemId = 6,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9109),
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9145),
                            ItemId = 7,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9142),
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9178),
                            ItemId = 8,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9175),
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 7, 6, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9213),
                            ItemId = 9,
                            StartDate = new DateTime(2023, 6, 15, 21, 43, 13, 70, DateTimeKind.Local).AddTicks(9210),
                            UserId = "9"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("ExtendsInARow")
                        .HasColumnType("int");

                    b.Property<float>("FinePerItemPerDay")
                        .HasColumnType("real");

                    b.Property<int>("ItemsAtSameTime")
                        .HasColumnType("int");

                    b.Property<int>("ItemsPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ReservationCost")
                        .HasColumnType("real");

                    b.Property<float>("SubscriptionCostPerMonth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
