// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDevelopment2.Data;

#nullable disable

namespace SoftwareDevelopment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230616081144_SubscriptionCostPerMOnth")]
    partial class SubscriptionCostPerMOnth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5cfd811-3e72-41da-9761-354d74b1b81d",
                            Email = "Warren_Dooley63@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "af6ac2486691ea30fa2bef6d2ab37a8677fadc1e",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21119b48-8e36-4fce-82d5-7c8ce783271f",
                            TwoFactorEnabled = false,
                            UserName = "Warren_Dooley63@hotmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e38cd454-a905-4689-bde2-126937a386d1",
                            Email = "Sheldon14@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "fe82179f10360e00892caeff923d4679010cfc4d",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac026aa1-35d3-4449-b173-12a0de686033",
                            TwoFactorEnabled = false,
                            UserName = "Sheldon14@hotmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5087f21-58b3-4148-9259-fb8f694e97e2",
                            Email = "Colin_Gibson77@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "2d68c5c90ba400e82271bcd71b23b4a1231c29e3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76c613aa-6005-4abd-ae14-85b7f3518a79",
                            TwoFactorEnabled = false,
                            UserName = "Colin_Gibson77@hotmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd65ec3-4aa6-4b10-99b9-8407da21e568",
                            Email = "Emanuel51@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "ac96bdac8a8834aac77d01d002fe13b9111612b5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc75d67e-0588-483c-bf6d-172faba25692",
                            TwoFactorEnabled = false,
                            UserName = "Emanuel51@hotmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fac618c-6f7e-4e53-aefc-30d8ffd9b85d",
                            Email = "Edwin71@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "77a0ad8fd8a59bd4859735bd9c4ea8b408667048",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8e40644-6b66-4044-9022-6f9e7e38360e",
                            TwoFactorEnabled = false,
                            UserName = "Edwin71@hotmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcabefe9-458b-4095-bb49-954cea729b11",
                            Email = "Beatrice_Ward@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "6967a4bd3cb0a471008e15c2238e7dd4777aedb6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2c80e9b-c134-4d19-9a11-54514d482873",
                            TwoFactorEnabled = false,
                            UserName = "Beatrice_Ward@gmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f5531e7-3ee6-4ade-a66f-00b5959bf690",
                            Email = "Deanna.Bruen82@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "ec033944b1a3b78614927d3ba9d5170ff803ed1b",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f195058e-b2f6-49c4-9062-ea210f0ce9d7",
                            TwoFactorEnabled = false,
                            UserName = "Deanna.Bruen82@gmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1639bbeb-b727-43a4-834b-86db1d593421",
                            Email = "Russell.Deckow@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "02ad3b73e9d7f79410fae57ff57b5e2b0e728d70",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33a6bf6a-700f-4aa7-88a3-523b0051e68e",
                            TwoFactorEnabled = false,
                            UserName = "Russell.Deckow@yahoo.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "057c4bb9-1b0a-4218-b05e-ed2ba321e722",
                            Email = "Owen77@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "bf3d469dc7451ab2cf655f687dd6c58134046230",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64c6ac9f-82ae-42c9-9e1e-967663041942",
                            TwoFactorEnabled = false,
                            UserName = "Owen77@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "899266d4-86a1-4b4e-88e6-e49a99c9d8a1",
                            Email = "Jo2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "9f4aa2f7ae1f6682159873bd2dbc0aaf40a14052",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17a2115-14b6-4afc-8db1-363a595fe8f4",
                            TwoFactorEnabled = false,
                            UserName = "Jo2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 1",
                            Title = "Harry Potter: 1",
                            YearOfRelease = 1998
                        },
                        new
                        {
                            Id = 2,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 2",
                            Title = "Harry Potter: 2",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = 3,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 3",
                            Title = "Harry Potter: 3",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = 4,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 4",
                            Title = "Harry Potter: 4",
                            YearOfRelease = 2001
                        },
                        new
                        {
                            Id = 5,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 5",
                            Title = "Harry Potter: 5",
                            YearOfRelease = 2002
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 6",
                            Title = "Harry Potter: 6",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 7",
                            Title = "Harry Potter: 7",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 8",
                            Title = "Harry Potter: 8",
                            YearOfRelease = 2005
                        },
                        new
                        {
                            Id = 9,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 9",
                            Title = "Harry Potter: 9",
                            YearOfRelease = 2006
                        },
                        new
                        {
                            Id = 10,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 10",
                            Title = "Harry Potter: 10",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = 11,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 11",
                            Title = "Harry Potter: 11",
                            YearOfRelease = 2008
                        },
                        new
                        {
                            Id = 12,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 12",
                            Title = "Harry Potter: 12",
                            YearOfRelease = 2009
                        },
                        new
                        {
                            Id = 13,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 13",
                            Title = "Harry Potter: 13",
                            YearOfRelease = 2010
                        },
                        new
                        {
                            Id = 14,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 14",
                            Title = "Harry Potter: 14",
                            YearOfRelease = 2011
                        },
                        new
                        {
                            Id = 15,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 15",
                            Title = "Harry Potter: 15",
                            YearOfRelease = 2012
                        },
                        new
                        {
                            Id = 16,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 16",
                            Title = "Harry Potter: 16",
                            YearOfRelease = 2013
                        },
                        new
                        {
                            Id = 17,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 17",
                            Title = "Harry Potter: 17",
                            YearOfRelease = 2014
                        },
                        new
                        {
                            Id = 18,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 18",
                            Title = "Harry Potter: 18",
                            YearOfRelease = 2015
                        },
                        new
                        {
                            Id = 19,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 19",
                            Title = "Harry Potter: 19",
                            YearOfRelease = 2016
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2686),
                            ItemId = 1,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2618),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2759),
                            ItemId = 2,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2757),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2789),
                            ItemId = 3,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2787),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2809),
                            ItemId = 4,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2808),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2868),
                            ItemId = 5,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2866),
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2892),
                            ItemId = 6,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2890),
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2914),
                            ItemId = 7,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2912),
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2936),
                            ItemId = 8,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2934),
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2959),
                            ItemId = 9,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2958),
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2984),
                            ItemId = 10,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(2983),
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3007),
                            ItemId = 11,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3006),
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3030),
                            ItemId = 12,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3029),
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3082),
                            ItemId = 13,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3080),
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3103),
                            ItemId = 14,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3101),
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3125),
                            ItemId = 15,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3124),
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3144),
                            ItemId = 16,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3143),
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3165),
                            ItemId = 17,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3163),
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3187),
                            ItemId = 18,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3186),
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            EndDate = new DateTime(2023, 7, 7, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3211),
                            ItemId = 19,
                            StartDate = new DateTime(2023, 6, 16, 10, 11, 43, 845, DateTimeKind.Local).AddTicks(3209),
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 10,
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ItemId = 11,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ItemId = 12,
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ItemId = 13,
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ItemId = 14,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ItemId = 15,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ItemId = 16,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ItemId = 17,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ItemId = 18,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ItemId = 19,
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<float>("CostPerMonth")
                        .HasColumnType("real");

                    b.Property<int>("ExtendsInARow")
                        .HasColumnType("int");

                    b.Property<float>("FinePerItemPerDay")
                        .HasColumnType("real");

                    b.Property<int>("ItemsAtSameTime")
                        .HasColumnType("int");

                    b.Property<int>("ItemsPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ReservationCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
