// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDevelopment2.Data;

#nullable disable

namespace SoftwareDevelopment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230616154327_AuthorsAndLocations")]
    partial class AuthorsAndLocations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e913b74-5d86-470e-bbc6-47ba5e2b98a7",
                            Email = "Keith64@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "0610b364bf6063f5b85d08eba3104f18b2b79971",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "745bb7b4-a8f6-41d3-aabc-b874b4d6d4d0",
                            TwoFactorEnabled = false,
                            UserName = "Keith64@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41029a7b-8d84-4a75-b941-8ec34f298f9c",
                            Email = "Don.Batz@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "f11914ac12da4ab57edd372554e1a625844bb17c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db1464c7-27f2-4c65-a899-fe4cfbd5ebad",
                            TwoFactorEnabled = false,
                            UserName = "Don.Batz@yahoo.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0616e5cf-edfd-4307-89d9-38d7ae448e78",
                            Email = "Audrey_Willms47@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "eb04c3bdabd1eec514c65b9de8509239ecfaac8d",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd2f4732-1155-4322-a835-9b9a217e26b3",
                            TwoFactorEnabled = false,
                            UserName = "Audrey_Willms47@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42da2dad-7b98-4ce3-adfb-45a412f7960a",
                            Email = "Amy31@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "ac57eb85a1607cc670a8908fe3500391458eaabb",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b9c1fb5-4d3e-400b-98b0-0bd8ce65ac74",
                            TwoFactorEnabled = false,
                            UserName = "Amy31@yahoo.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01f11363-df9f-4af9-bc50-3655a00db403",
                            Email = "Sarah.Harvey@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "32b13acd7ae9f2af4079425e90028dd38dfc8635",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c244412d-3ddc-4216-b027-2e920c264d4b",
                            TwoFactorEnabled = false,
                            UserName = "Sarah.Harvey@yahoo.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0d7720-1eac-4004-b38a-a7d0385edd93",
                            Email = "Gregg24@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "4df9dce2afd35e84f84b6c5b4c8a0b01c4f21302",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "677a0681-2694-44d8-a022-231cceeb8913",
                            TwoFactorEnabled = false,
                            UserName = "Gregg24@hotmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c35015de-aa77-4196-b5fc-3a6169091d73",
                            Email = "Isabel_Raynor19@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "ce440c133664b4a2f2f4bb7f0764fa931fec5c0c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b9b886e-335c-406e-9891-cce6534e213a",
                            TwoFactorEnabled = false,
                            UserName = "Isabel_Raynor19@yahoo.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3d1ee48-bb41-4447-91b9-8323e8dcb75e",
                            Email = "Marguerite_Stracke29@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "43eec400df817b70a4f3716237843435cefa0e12",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7789cd1-0311-4611-9f2c-98c3e9d8eeab",
                            TwoFactorEnabled = false,
                            UserName = "Marguerite_Stracke29@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5e912b1-5236-4c66-8acd-516bfb1b5311",
                            Email = "Sally_Price@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "695fbeda67510173dada862d56e42d31ed70cf9b",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abd9e69e-beed-494c-a8fe-0085f6652b7a",
                            TwoFactorEnabled = false,
                            UserName = "Sally_Price@hotmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c261dc9a-0a68-4173-9394-e9d820accd66",
                            Email = "Dixie.Halvorson88@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "1350c77b7d9028a07ee7732d7723afca1f467593",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "252c14f9-ea2b-4b09-b97a-d49163b318ec",
                            TwoFactorEnabled = false,
                            UserName = "Dixie.Halvorson88@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            LocationId = 1,
                            Title = "Harry Potter: 1",
                            YearOfRelease = 1998
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            LocationId = 2,
                            Title = "Harry Potter: 2",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            LocationId = 3,
                            Title = "Harry Potter: 3",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            LocationId = 4,
                            Title = "Harry Potter: 4",
                            YearOfRelease = 2001
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            LocationId = 5,
                            Title = "Harry Potter: 5",
                            YearOfRelease = 2002
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            LocationId = 6,
                            Title = "Harry Potter: 6",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            LocationId = 7,
                            Title = "Harry Potter: 7",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            LocationId = 8,
                            Title = "Harry Potter: 8",
                            YearOfRelease = 2005
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            LocationId = 9,
                            Title = "Harry Potter: 9",
                            YearOfRelease = 2006
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            LocationId = 10,
                            Title = "Harry Potter: 10",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 11,
                            LocationId = 11,
                            Title = "Harry Potter: 11",
                            YearOfRelease = 2008
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 12,
                            LocationId = 12,
                            Title = "Harry Potter: 12",
                            YearOfRelease = 2009
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 13,
                            LocationId = 13,
                            Title = "Harry Potter: 13",
                            YearOfRelease = 2010
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 14,
                            LocationId = 14,
                            Title = "Harry Potter: 14",
                            YearOfRelease = 2011
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 15,
                            LocationId = 15,
                            Title = "Harry Potter: 15",
                            YearOfRelease = 2012
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 16,
                            LocationId = 16,
                            Title = "Harry Potter: 16",
                            YearOfRelease = 2013
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 17,
                            LocationId = 17,
                            Title = "Harry Potter: 17",
                            YearOfRelease = 2014
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 18,
                            LocationId = 18,
                            Title = "Harry Potter: 18",
                            YearOfRelease = 2015
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 19,
                            LocationId = 19,
                            Title = "Harry Potter: 19",
                            YearOfRelease = 2016
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7198),
                            ItemId = 1,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7152),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7224),
                            ItemId = 2,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7223),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7241),
                            ItemId = 3,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7240),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7257),
                            ItemId = 4,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7256),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7274),
                            ItemId = 5,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7273),
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7314),
                            ItemId = 6,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7313),
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7331),
                            ItemId = 7,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7329),
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7345),
                            ItemId = 8,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7344),
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7362),
                            ItemId = 9,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7360),
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7379),
                            ItemId = 10,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7378),
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7394),
                            ItemId = 11,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7393),
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7409),
                            ItemId = 12,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7408),
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7424),
                            ItemId = 13,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7423),
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7459),
                            ItemId = 14,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7458),
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7478),
                            ItemId = 15,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7477),
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7495),
                            ItemId = 16,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7494),
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7512),
                            ItemId = 17,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7511),
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7529),
                            ItemId = 18,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7528),
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            EndDate = new DateTime(2023, 7, 7, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7544),
                            ItemId = 19,
                            StartDate = new DateTime(2023, 6, 16, 17, 43, 27, 24, DateTimeKind.Local).AddTicks(7543),
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 10,
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ItemId = 11,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ItemId = 12,
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ItemId = 13,
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ItemId = 14,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ItemId = 15,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ItemId = 16,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ItemId = 17,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ItemId = 18,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ItemId = 19,
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<float>("CostPerMonth")
                        .HasColumnType("real");

                    b.Property<int>("ExtendsInARow")
                        .HasColumnType("int");

                    b.Property<float>("FinePerItemPerDay")
                        .HasColumnType("real");

                    b.Property<int>("ItemsAtSameTime")
                        .HasColumnType("int");

                    b.Property<int>("ItemsPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ReservationCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
