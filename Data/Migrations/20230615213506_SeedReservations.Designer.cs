// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDevelopment2.Data;

#nullable disable

namespace SoftwareDevelopment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615213506_SeedReservations")]
    partial class SeedReservations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b09e1fb-2167-4c11-9dbb-e3aae5866cc4",
                            Email = "Blanche_Turcotte84@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "4e729b21a3ed9585121d34451bc3303bf424386d",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07e8de70-3329-496a-9dd3-315e862533c0",
                            TwoFactorEnabled = false,
                            UserName = "Blanche_Turcotte84@yahoo.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8df0010d-bed2-4881-9c84-0e258f709520",
                            Email = "Eduardo_DAmore79@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "e695b70d52395b3f6a28a94ccff723345cf9db86",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba930388-6af9-4277-95c6-857eaee3dab0",
                            TwoFactorEnabled = false,
                            UserName = "Eduardo_DAmore79@hotmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cddc3c40-4ab8-449f-8237-ddc0832d520e",
                            Email = "Everett6@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "38bf5e194e447a56c76194005cd7cdac849c4133",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2937c4c-04d7-4408-acf5-938237e98c73",
                            TwoFactorEnabled = false,
                            UserName = "Everett6@yahoo.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d46c198f-f8da-43a4-86a8-d242c05552e3",
                            Email = "Kelvin_Ortiz24@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "c0bdcabc96b21ef0992778dae3ec4cb2ea692a39",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b116eacf-0eb9-4f73-aacd-911372a4a832",
                            TwoFactorEnabled = false,
                            UserName = "Kelvin_Ortiz24@hotmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9deb583d-8c21-4eee-9211-816a8aedb6b3",
                            Email = "Margarita28@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "d36b0916d00ee223d533e81c4fbb9bdff3a26094",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a14c25f-2de3-4508-978c-df407129ebcb",
                            TwoFactorEnabled = false,
                            UserName = "Margarita28@hotmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13b20cc4-f3b9-4c03-94b5-ce22cb557def",
                            Email = "Susan_Connelly86@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "b028fa1c4d79851efcce7922bfc094364d63a8cd",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3a12763-18c2-4ef9-a497-29ffa2fb631f",
                            TwoFactorEnabled = false,
                            UserName = "Susan_Connelly86@yahoo.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "575b0d84-1925-485e-ac85-b73c9effe7ba",
                            Email = "Eunice.Weber@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "c71667f70bb4655d1c3dddaf9c716bdb2f7895f6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed5509cf-2700-435f-95b6-e527472f7e72",
                            TwoFactorEnabled = false,
                            UserName = "Eunice.Weber@yahoo.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ce659a-d2ac-4c67-a00a-d9260461c99e",
                            Email = "Rita_Abbott30@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "afd1861bf0c21ac808a246bc1933956edb08b386",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2311ac68-d4fd-4df4-b8ae-0806ad8faa7d",
                            TwoFactorEnabled = false,
                            UserName = "Rita_Abbott30@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8edfecaa-4842-407d-afd8-f0a7c6fcc63f",
                            Email = "Austin_Marquardt46@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "4f6c6ae002a47dbcdcd938b95af7c74a3c575a46",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ce18c90-8ce7-4324-a709-161b3320a414",
                            TwoFactorEnabled = false,
                            UserName = "Austin_Marquardt46@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b9c2654-b8f6-4ada-a67c-5c0eab7fd578",
                            Email = "Bethany.Schuster75@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "6faedeb3c3a6e242dc301fc45a8edbc8ff553320",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e1bbb3a-56e3-44a1-bd67-3c46ba97eaec",
                            TwoFactorEnabled = false,
                            UserName = "Bethany.Schuster75@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 1",
                            Title = "Harry Potter: 1",
                            YearOfRelease = 1998
                        },
                        new
                        {
                            Id = 2,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 2",
                            Title = "Harry Potter: 2",
                            YearOfRelease = 1999
                        },
                        new
                        {
                            Id = 3,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 3",
                            Title = "Harry Potter: 3",
                            YearOfRelease = 2000
                        },
                        new
                        {
                            Id = 4,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 4",
                            Title = "Harry Potter: 4",
                            YearOfRelease = 2001
                        },
                        new
                        {
                            Id = 5,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 5",
                            Title = "Harry Potter: 5",
                            YearOfRelease = 2002
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 6",
                            Title = "Harry Potter: 6",
                            YearOfRelease = 2003
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 7",
                            Title = "Harry Potter: 7",
                            YearOfRelease = 2004
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 8",
                            Title = "Harry Potter: 8",
                            YearOfRelease = 2005
                        },
                        new
                        {
                            Id = 9,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 9",
                            Title = "Harry Potter: 9",
                            YearOfRelease = 2006
                        },
                        new
                        {
                            Id = 10,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 10",
                            Title = "Harry Potter: 10",
                            YearOfRelease = 2007
                        },
                        new
                        {
                            Id = 11,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 11",
                            Title = "Harry Potter: 11",
                            YearOfRelease = 2008
                        },
                        new
                        {
                            Id = 12,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 12",
                            Title = "Harry Potter: 12",
                            YearOfRelease = 2009
                        },
                        new
                        {
                            Id = 13,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 13",
                            Title = "Harry Potter: 13",
                            YearOfRelease = 2010
                        },
                        new
                        {
                            Id = 14,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 14",
                            Title = "Harry Potter: 14",
                            YearOfRelease = 2011
                        },
                        new
                        {
                            Id = 15,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 15",
                            Title = "Harry Potter: 15",
                            YearOfRelease = 2012
                        },
                        new
                        {
                            Id = 16,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 16",
                            Title = "Harry Potter: 16",
                            YearOfRelease = 2013
                        },
                        new
                        {
                            Id = 17,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 17",
                            Title = "Harry Potter: 17",
                            YearOfRelease = 2014
                        },
                        new
                        {
                            Id = 18,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 18",
                            Title = "Harry Potter: 18",
                            YearOfRelease = 2015
                        },
                        new
                        {
                            Id = 19,
                            Author = "J.K. Rowling",
                            Location = "Verdieping 19",
                            Title = "Harry Potter: 19",
                            YearOfRelease = 2016
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9410),
                            ItemId = 1,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9361),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9458),
                            ItemId = 2,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9457),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9476),
                            ItemId = 3,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9474),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9516),
                            ItemId = 4,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9515),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9535),
                            ItemId = 5,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9534),
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9555),
                            ItemId = 6,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9553),
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9570),
                            ItemId = 7,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9569),
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9586),
                            ItemId = 8,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9585),
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9602),
                            ItemId = 9,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9601),
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9619),
                            ItemId = 10,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9618),
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9634),
                            ItemId = 11,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9633),
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9675),
                            ItemId = 12,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9674),
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9693),
                            ItemId = 13,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9692),
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9708),
                            ItemId = 14,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9707),
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9723),
                            ItemId = 15,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9722),
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9739),
                            ItemId = 16,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9738),
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9755),
                            ItemId = 17,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9754),
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9772),
                            ItemId = 18,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9771),
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            EndDate = new DateTime(2023, 7, 6, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9812),
                            ItemId = 19,
                            StartDate = new DateTime(2023, 6, 15, 23, 35, 6, 722, DateTimeKind.Local).AddTicks(9811),
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 10,
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ItemId = 11,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ItemId = 12,
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ItemId = 13,
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ItemId = 14,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ItemId = 15,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ItemId = 16,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ItemId = 17,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ItemId = 18,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ItemId = 19,
                            UserId = "19"
                        });
                });

            modelBuilder.Entity("SoftwareDevelopment2.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("ExtendsInARow")
                        .HasColumnType("int");

                    b.Property<float>("FinePerItemPerDay")
                        .HasColumnType("real");

                    b.Property<int>("ItemsAtSameTime")
                        .HasColumnType("int");

                    b.Property<int>("ItemsPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ReservationCost")
                        .HasColumnType("real");

                    b.Property<float>("SubscriptionCostPerMonth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
